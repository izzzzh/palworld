// Code generated by goctl. DO NOT EDIT.
// Source: comments.proto

package commentsserver

import (
	"context"

	"palworld/rpc/comments/pb/comments"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCommentReq     = comments.AddCommentReq
	AddCommentResp    = comments.AddCommentResp
	Comment           = comments.Comment
	CommentListResp   = comments.CommentListResp
	DeleteCommentReq  = comments.DeleteCommentReq
	DeleteCommentResp = comments.DeleteCommentResp
	ListCommentReq    = comments.ListCommentReq

	CommentsServer interface {
		AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
		ListComment(ctx context.Context, in *ListCommentReq, opts ...grpc.CallOption) (*CommentListResp, error)
		DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error)
	}

	defaultCommentsServer struct {
		cli zrpc.Client
	}
)

func NewCommentsServer(cli zrpc.Client) CommentsServer {
	return &defaultCommentsServer{
		cli: cli,
	}
}

func (m *defaultCommentsServer) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	client := comments.NewCommentsServerClient(m.cli.Conn())
	return client.AddComment(ctx, in, opts...)
}

func (m *defaultCommentsServer) ListComment(ctx context.Context, in *ListCommentReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := comments.NewCommentsServerClient(m.cli.Conn())
	return client.ListComment(ctx, in, opts...)
}

func (m *defaultCommentsServer) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error) {
	client := comments.NewCommentsServerClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}
