// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"palworld/rpc/comments/model"
)

func newComments(db *gorm.DB, opts ...gen.DOOption) comments {
	_comments := comments{}

	_comments.commentsDo.UseDB(db, opts...)
	_comments.commentsDo.UseModel(&model.Comments{})

	tableName := _comments.commentsDo.TableName()
	_comments.ALL = field.NewAsterisk(tableName)
	_comments.ID = field.NewInt64(tableName, "id")
	_comments.UserID = field.NewInt64(tableName, "user_id")
	_comments.Category = field.NewString(tableName, "category")
	_comments.ObjectID = field.NewInt64(tableName, "object_id")
	_comments.Content = field.NewString(tableName, "content")
	_comments.ParentCommentID = field.NewInt64(tableName, "parent_comment_id")
	_comments.RootCommentID = field.NewInt64(tableName, "root_comment_id")
	_comments.CreatedAt = field.NewTime(tableName, "created_at")
	_comments.UpdatedAt = field.NewTime(tableName, "updated_at")
	_comments.DeletedAt = field.NewField(tableName, "deleted_at")

	_comments.fillFieldMap()

	return _comments
}

// comments 评论
type comments struct {
	commentsDo

	ALL             field.Asterisk
	ID              field.Int64
	UserID          field.Int64  // 用户id
	Category        field.String // 类型
	ObjectID        field.Int64  // 对象id
	Content         field.String // 内容
	ParentCommentID field.Int64  // 父评论id
	RootCommentID   field.Int64  // 根评论id
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (c comments) Table(newTableName string) *comments {
	c.commentsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comments) As(alias string) *comments {
	c.commentsDo.DO = *(c.commentsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comments) updateTableName(table string) *comments {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.UserID = field.NewInt64(table, "user_id")
	c.Category = field.NewString(table, "category")
	c.ObjectID = field.NewInt64(table, "object_id")
	c.Content = field.NewString(table, "content")
	c.ParentCommentID = field.NewInt64(table, "parent_comment_id")
	c.RootCommentID = field.NewInt64(table, "root_comment_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *comments) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comments) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["category"] = c.Category
	c.fieldMap["object_id"] = c.ObjectID
	c.fieldMap["content"] = c.Content
	c.fieldMap["parent_comment_id"] = c.ParentCommentID
	c.fieldMap["root_comment_id"] = c.RootCommentID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c comments) clone(db *gorm.DB) comments {
	c.commentsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comments) replaceDB(db *gorm.DB) comments {
	c.commentsDo.ReplaceDB(db)
	return c
}

type commentsDo struct{ gen.DO }

type ICommentsDo interface {
	gen.SubQuery
	Debug() ICommentsDo
	WithContext(ctx context.Context) ICommentsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommentsDo
	WriteDB() ICommentsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommentsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommentsDo
	Not(conds ...gen.Condition) ICommentsDo
	Or(conds ...gen.Condition) ICommentsDo
	Select(conds ...field.Expr) ICommentsDo
	Where(conds ...gen.Condition) ICommentsDo
	Order(conds ...field.Expr) ICommentsDo
	Distinct(cols ...field.Expr) ICommentsDo
	Omit(cols ...field.Expr) ICommentsDo
	Join(table schema.Tabler, on ...field.Expr) ICommentsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommentsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommentsDo
	Group(cols ...field.Expr) ICommentsDo
	Having(conds ...gen.Condition) ICommentsDo
	Limit(limit int) ICommentsDo
	Offset(offset int) ICommentsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentsDo
	Unscoped() ICommentsDo
	Create(values ...*model.Comments) error
	CreateInBatches(values []*model.Comments, batchSize int) error
	Save(values ...*model.Comments) error
	First() (*model.Comments, error)
	Take() (*model.Comments, error)
	Last() (*model.Comments, error)
	Find() ([]*model.Comments, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Comments, err error)
	FindInBatches(result *[]*model.Comments, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Comments) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommentsDo
	Assign(attrs ...field.AssignExpr) ICommentsDo
	Joins(fields ...field.RelationField) ICommentsDo
	Preload(fields ...field.RelationField) ICommentsDo
	FirstOrInit() (*model.Comments, error)
	FirstOrCreate() (*model.Comments, error)
	FindByPage(offset int, limit int) (result []*model.Comments, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommentsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commentsDo) Debug() ICommentsDo {
	return c.withDO(c.DO.Debug())
}

func (c commentsDo) WithContext(ctx context.Context) ICommentsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commentsDo) ReadDB() ICommentsDo {
	return c.Clauses(dbresolver.Read)
}

func (c commentsDo) WriteDB() ICommentsDo {
	return c.Clauses(dbresolver.Write)
}

func (c commentsDo) Session(config *gorm.Session) ICommentsDo {
	return c.withDO(c.DO.Session(config))
}

func (c commentsDo) Clauses(conds ...clause.Expression) ICommentsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commentsDo) Returning(value interface{}, columns ...string) ICommentsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commentsDo) Not(conds ...gen.Condition) ICommentsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commentsDo) Or(conds ...gen.Condition) ICommentsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commentsDo) Select(conds ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commentsDo) Where(conds ...gen.Condition) ICommentsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commentsDo) Order(conds ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commentsDo) Distinct(cols ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commentsDo) Omit(cols ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commentsDo) Join(table schema.Tabler, on ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commentsDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commentsDo) Group(cols ...field.Expr) ICommentsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commentsDo) Having(conds ...gen.Condition) ICommentsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commentsDo) Limit(limit int) ICommentsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commentsDo) Offset(offset int) ICommentsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commentsDo) Unscoped() ICommentsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commentsDo) Create(values ...*model.Comments) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commentsDo) CreateInBatches(values []*model.Comments, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commentsDo) Save(values ...*model.Comments) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commentsDo) First() (*model.Comments, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comments), nil
	}
}

func (c commentsDo) Take() (*model.Comments, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comments), nil
	}
}

func (c commentsDo) Last() (*model.Comments, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comments), nil
	}
}

func (c commentsDo) Find() ([]*model.Comments, error) {
	result, err := c.DO.Find()
	return result.([]*model.Comments), err
}

func (c commentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Comments, err error) {
	buf := make([]*model.Comments, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commentsDo) FindInBatches(result *[]*model.Comments, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commentsDo) Attrs(attrs ...field.AssignExpr) ICommentsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commentsDo) Assign(attrs ...field.AssignExpr) ICommentsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commentsDo) Joins(fields ...field.RelationField) ICommentsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commentsDo) Preload(fields ...field.RelationField) ICommentsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commentsDo) FirstOrInit() (*model.Comments, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comments), nil
	}
}

func (c commentsDo) FirstOrCreate() (*model.Comments, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comments), nil
	}
}

func (c commentsDo) FindByPage(offset int, limit int) (result []*model.Comments, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commentsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commentsDo) Delete(models ...*model.Comments) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commentsDo) withDO(do gen.Dao) *commentsDo {
	c.DO = *do.(*gen.DO)
	return c
}
