// Code generated by goctl. DO NOT EDIT.
// Source: skill.proto

package skillserver

import (
	"context"

	"palworld/rpc/skill/pb/skill"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetSkillReq   = skill.GetSkillReq
	GetSkillResp  = skill.GetSkillResp
	ListSkillReq  = skill.ListSkillReq
	ListSkillResp = skill.ListSkillResp
	Skill         = skill.Skill

	SkillServer interface {
		GetSkill(ctx context.Context, in *GetSkillReq, opts ...grpc.CallOption) (*GetSkillResp, error)
		ListSkill(ctx context.Context, in *ListSkillReq, opts ...grpc.CallOption) (*ListSkillResp, error)
	}

	defaultSkillServer struct {
		cli zrpc.Client
	}
)

func NewSkillServer(cli zrpc.Client) SkillServer {
	return &defaultSkillServer{
		cli: cli,
	}
}

func (m *defaultSkillServer) GetSkill(ctx context.Context, in *GetSkillReq, opts ...grpc.CallOption) (*GetSkillResp, error) {
	client := skill.NewSkillServerClient(m.cli.Conn())
	return client.GetSkill(ctx, in, opts...)
}

func (m *defaultSkillServer) ListSkill(ctx context.Context, in *ListSkillReq, opts ...grpc.CallOption) (*ListSkillResp, error) {
	client := skill.NewSkillServerClient(m.cli.Conn())
	return client.ListSkill(ctx, in, opts...)
}
