// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: skill.proto

package skill

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SkillServer_GetSkill_FullMethodName  = "/skill.SkillServer/GetSkill"
	SkillServer_ListSkill_FullMethodName = "/skill.SkillServer/ListSkill"
)

// SkillServerClient is the client API for SkillServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkillServerClient interface {
	GetSkill(ctx context.Context, in *GetSkillReq, opts ...grpc.CallOption) (*GetSkillResp, error)
	ListSkill(ctx context.Context, in *ListSkillReq, opts ...grpc.CallOption) (*ListSkillResp, error)
}

type skillServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSkillServerClient(cc grpc.ClientConnInterface) SkillServerClient {
	return &skillServerClient{cc}
}

func (c *skillServerClient) GetSkill(ctx context.Context, in *GetSkillReq, opts ...grpc.CallOption) (*GetSkillResp, error) {
	out := new(GetSkillResp)
	err := c.cc.Invoke(ctx, SkillServer_GetSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillServerClient) ListSkill(ctx context.Context, in *ListSkillReq, opts ...grpc.CallOption) (*ListSkillResp, error) {
	out := new(ListSkillResp)
	err := c.cc.Invoke(ctx, SkillServer_ListSkill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkillServerServer is the server API for SkillServer service.
// All implementations must embed UnimplementedSkillServerServer
// for forward compatibility
type SkillServerServer interface {
	GetSkill(context.Context, *GetSkillReq) (*GetSkillResp, error)
	ListSkill(context.Context, *ListSkillReq) (*ListSkillResp, error)
	mustEmbedUnimplementedSkillServerServer()
}

// UnimplementedSkillServerServer must be embedded to have forward compatible implementations.
type UnimplementedSkillServerServer struct {
}

func (UnimplementedSkillServerServer) GetSkill(context.Context, *GetSkillReq) (*GetSkillResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkill not implemented")
}
func (UnimplementedSkillServerServer) ListSkill(context.Context, *ListSkillReq) (*ListSkillResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkill not implemented")
}
func (UnimplementedSkillServerServer) mustEmbedUnimplementedSkillServerServer() {}

// UnsafeSkillServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkillServerServer will
// result in compilation errors.
type UnsafeSkillServerServer interface {
	mustEmbedUnimplementedSkillServerServer()
}

func RegisterSkillServerServer(s grpc.ServiceRegistrar, srv SkillServerServer) {
	s.RegisterService(&SkillServer_ServiceDesc, srv)
}

func _SkillServer_GetSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServerServer).GetSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillServer_GetSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServerServer).GetSkill(ctx, req.(*GetSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillServer_ListSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillServerServer).ListSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillServer_ListSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillServerServer).ListSkill(ctx, req.(*ListSkillReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SkillServer_ServiceDesc is the grpc.ServiceDesc for SkillServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkillServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skill.SkillServer",
	HandlerType: (*SkillServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSkill",
			Handler:    _SkillServer_GetSkill_Handler,
		},
		{
			MethodName: "ListSkill",
			Handler:    _SkillServer_ListSkill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skill.proto",
}
