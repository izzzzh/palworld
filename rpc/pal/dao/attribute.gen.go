// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"palworld/rpc/pal/model"
)

func newAttribute(db *gorm.DB, opts ...gen.DOOption) attribute {
	_attribute := attribute{}

	_attribute.attributeDo.UseDB(db, opts...)
	_attribute.attributeDo.UseModel(&model.Attribute{})

	tableName := _attribute.attributeDo.TableName()
	_attribute.ALL = field.NewAsterisk(tableName)
	_attribute.ID = field.NewInt64(tableName, "id")
	_attribute.Name = field.NewString(tableName, "name")
	_attribute.Alias_ = field.NewString(tableName, "alias")
	_attribute.Restrain = field.NewString(tableName, "restrain")
	_attribute.BeRestrained = field.NewInt32(tableName, "be_restrained")

	_attribute.fillFieldMap()

	return _attribute
}

// attribute 属性
type attribute struct {
	attributeDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String // 名称
	Alias_       field.String // 别名
	Restrain     field.String // 克制
	BeRestrained field.Int32  // 被克制

	fieldMap map[string]field.Expr
}

func (a attribute) Table(newTableName string) *attribute {
	a.attributeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attribute) As(alias string) *attribute {
	a.attributeDo.DO = *(a.attributeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attribute) updateTableName(table string) *attribute {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Alias_ = field.NewString(table, "alias")
	a.Restrain = field.NewString(table, "restrain")
	a.BeRestrained = field.NewInt32(table, "be_restrained")

	a.fillFieldMap()

	return a
}

func (a *attribute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attribute) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["alias"] = a.Alias_
	a.fieldMap["restrain"] = a.Restrain
	a.fieldMap["be_restrained"] = a.BeRestrained
}

func (a attribute) clone(db *gorm.DB) attribute {
	a.attributeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attribute) replaceDB(db *gorm.DB) attribute {
	a.attributeDo.ReplaceDB(db)
	return a
}

type attributeDo struct{ gen.DO }

type IAttributeDo interface {
	gen.SubQuery
	Debug() IAttributeDo
	WithContext(ctx context.Context) IAttributeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttributeDo
	WriteDB() IAttributeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttributeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttributeDo
	Not(conds ...gen.Condition) IAttributeDo
	Or(conds ...gen.Condition) IAttributeDo
	Select(conds ...field.Expr) IAttributeDo
	Where(conds ...gen.Condition) IAttributeDo
	Order(conds ...field.Expr) IAttributeDo
	Distinct(cols ...field.Expr) IAttributeDo
	Omit(cols ...field.Expr) IAttributeDo
	Join(table schema.Tabler, on ...field.Expr) IAttributeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttributeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttributeDo
	Group(cols ...field.Expr) IAttributeDo
	Having(conds ...gen.Condition) IAttributeDo
	Limit(limit int) IAttributeDo
	Offset(offset int) IAttributeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttributeDo
	Unscoped() IAttributeDo
	Create(values ...*model.Attribute) error
	CreateInBatches(values []*model.Attribute, batchSize int) error
	Save(values ...*model.Attribute) error
	First() (*model.Attribute, error)
	Take() (*model.Attribute, error)
	Last() (*model.Attribute, error)
	Find() ([]*model.Attribute, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attribute, err error)
	FindInBatches(result *[]*model.Attribute, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Attribute) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttributeDo
	Assign(attrs ...field.AssignExpr) IAttributeDo
	Joins(fields ...field.RelationField) IAttributeDo
	Preload(fields ...field.RelationField) IAttributeDo
	FirstOrInit() (*model.Attribute, error)
	FirstOrCreate() (*model.Attribute, error)
	FindByPage(offset int, limit int) (result []*model.Attribute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttributeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attributeDo) Debug() IAttributeDo {
	return a.withDO(a.DO.Debug())
}

func (a attributeDo) WithContext(ctx context.Context) IAttributeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attributeDo) ReadDB() IAttributeDo {
	return a.Clauses(dbresolver.Read)
}

func (a attributeDo) WriteDB() IAttributeDo {
	return a.Clauses(dbresolver.Write)
}

func (a attributeDo) Session(config *gorm.Session) IAttributeDo {
	return a.withDO(a.DO.Session(config))
}

func (a attributeDo) Clauses(conds ...clause.Expression) IAttributeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attributeDo) Returning(value interface{}, columns ...string) IAttributeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attributeDo) Not(conds ...gen.Condition) IAttributeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attributeDo) Or(conds ...gen.Condition) IAttributeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attributeDo) Select(conds ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attributeDo) Where(conds ...gen.Condition) IAttributeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attributeDo) Order(conds ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attributeDo) Distinct(cols ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attributeDo) Omit(cols ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attributeDo) Join(table schema.Tabler, on ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attributeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attributeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attributeDo) Group(cols ...field.Expr) IAttributeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attributeDo) Having(conds ...gen.Condition) IAttributeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attributeDo) Limit(limit int) IAttributeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attributeDo) Offset(offset int) IAttributeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attributeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttributeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attributeDo) Unscoped() IAttributeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attributeDo) Create(values ...*model.Attribute) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attributeDo) CreateInBatches(values []*model.Attribute, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attributeDo) Save(values ...*model.Attribute) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attributeDo) First() (*model.Attribute, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attribute), nil
	}
}

func (a attributeDo) Take() (*model.Attribute, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attribute), nil
	}
}

func (a attributeDo) Last() (*model.Attribute, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attribute), nil
	}
}

func (a attributeDo) Find() ([]*model.Attribute, error) {
	result, err := a.DO.Find()
	return result.([]*model.Attribute), err
}

func (a attributeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attribute, err error) {
	buf := make([]*model.Attribute, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attributeDo) FindInBatches(result *[]*model.Attribute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attributeDo) Attrs(attrs ...field.AssignExpr) IAttributeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attributeDo) Assign(attrs ...field.AssignExpr) IAttributeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attributeDo) Joins(fields ...field.RelationField) IAttributeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attributeDo) Preload(fields ...field.RelationField) IAttributeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attributeDo) FirstOrInit() (*model.Attribute, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attribute), nil
	}
}

func (a attributeDo) FirstOrCreate() (*model.Attribute, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attribute), nil
	}
}

func (a attributeDo) FindByPage(offset int, limit int) (result []*model.Attribute, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attributeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attributeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attributeDo) Delete(models ...*model.Attribute) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attributeDo) withDO(do gen.Dao) *attributeDo {
	a.DO = *do.(*gen.DO)
	return a
}
