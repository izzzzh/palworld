// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"palworld/rpc/pal_mate/model"
)

func newPalMateMap(db *gorm.DB, opts ...gen.DOOption) palMateMap {
	_palMateMap := palMateMap{}

	_palMateMap.palMateMapDo.UseDB(db, opts...)
	_palMateMap.palMateMapDo.UseModel(&model.PalMateMap{})

	tableName := _palMateMap.palMateMapDo.TableName()
	_palMateMap.ALL = field.NewAsterisk(tableName)
	_palMateMap.ID = field.NewInt64(tableName, "id")
	_palMateMap.ParentOne = field.NewInt32(tableName, "parent_one")
	_palMateMap.ParentTwo = field.NewInt32(tableName, "parent_two")
	_palMateMap.Result = field.NewInt32(tableName, "result")

	_palMateMap.fillFieldMap()

	return _palMateMap
}

// palMateMap 帕鲁配对表
type palMateMap struct {
	palMateMapDo

	ALL       field.Asterisk
	ID        field.Int64
	ParentOne field.Int32 // 父母一号
	ParentTwo field.Int32 // 父母二号
	Result    field.Int32 // 后代

	fieldMap map[string]field.Expr
}

func (p palMateMap) Table(newTableName string) *palMateMap {
	p.palMateMapDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p palMateMap) As(alias string) *palMateMap {
	p.palMateMapDo.DO = *(p.palMateMapDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *palMateMap) updateTableName(table string) *palMateMap {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ParentOne = field.NewInt32(table, "parent_one")
	p.ParentTwo = field.NewInt32(table, "parent_two")
	p.Result = field.NewInt32(table, "result")

	p.fillFieldMap()

	return p
}

func (p *palMateMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *palMateMap) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["parent_one"] = p.ParentOne
	p.fieldMap["parent_two"] = p.ParentTwo
	p.fieldMap["result"] = p.Result
}

func (p palMateMap) clone(db *gorm.DB) palMateMap {
	p.palMateMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p palMateMap) replaceDB(db *gorm.DB) palMateMap {
	p.palMateMapDo.ReplaceDB(db)
	return p
}

type palMateMapDo struct{ gen.DO }

type IPalMateMapDo interface {
	gen.SubQuery
	Debug() IPalMateMapDo
	WithContext(ctx context.Context) IPalMateMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPalMateMapDo
	WriteDB() IPalMateMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPalMateMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPalMateMapDo
	Not(conds ...gen.Condition) IPalMateMapDo
	Or(conds ...gen.Condition) IPalMateMapDo
	Select(conds ...field.Expr) IPalMateMapDo
	Where(conds ...gen.Condition) IPalMateMapDo
	Order(conds ...field.Expr) IPalMateMapDo
	Distinct(cols ...field.Expr) IPalMateMapDo
	Omit(cols ...field.Expr) IPalMateMapDo
	Join(table schema.Tabler, on ...field.Expr) IPalMateMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPalMateMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPalMateMapDo
	Group(cols ...field.Expr) IPalMateMapDo
	Having(conds ...gen.Condition) IPalMateMapDo
	Limit(limit int) IPalMateMapDo
	Offset(offset int) IPalMateMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPalMateMapDo
	Unscoped() IPalMateMapDo
	Create(values ...*model.PalMateMap) error
	CreateInBatches(values []*model.PalMateMap, batchSize int) error
	Save(values ...*model.PalMateMap) error
	First() (*model.PalMateMap, error)
	Take() (*model.PalMateMap, error)
	Last() (*model.PalMateMap, error)
	Find() ([]*model.PalMateMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PalMateMap, err error)
	FindInBatches(result *[]*model.PalMateMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PalMateMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPalMateMapDo
	Assign(attrs ...field.AssignExpr) IPalMateMapDo
	Joins(fields ...field.RelationField) IPalMateMapDo
	Preload(fields ...field.RelationField) IPalMateMapDo
	FirstOrInit() (*model.PalMateMap, error)
	FirstOrCreate() (*model.PalMateMap, error)
	FindByPage(offset int, limit int) (result []*model.PalMateMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPalMateMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p palMateMapDo) Debug() IPalMateMapDo {
	return p.withDO(p.DO.Debug())
}

func (p palMateMapDo) WithContext(ctx context.Context) IPalMateMapDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p palMateMapDo) ReadDB() IPalMateMapDo {
	return p.Clauses(dbresolver.Read)
}

func (p palMateMapDo) WriteDB() IPalMateMapDo {
	return p.Clauses(dbresolver.Write)
}

func (p palMateMapDo) Session(config *gorm.Session) IPalMateMapDo {
	return p.withDO(p.DO.Session(config))
}

func (p palMateMapDo) Clauses(conds ...clause.Expression) IPalMateMapDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p palMateMapDo) Returning(value interface{}, columns ...string) IPalMateMapDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p palMateMapDo) Not(conds ...gen.Condition) IPalMateMapDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p palMateMapDo) Or(conds ...gen.Condition) IPalMateMapDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p palMateMapDo) Select(conds ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p palMateMapDo) Where(conds ...gen.Condition) IPalMateMapDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p palMateMapDo) Order(conds ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p palMateMapDo) Distinct(cols ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p palMateMapDo) Omit(cols ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p palMateMapDo) Join(table schema.Tabler, on ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p palMateMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p palMateMapDo) RightJoin(table schema.Tabler, on ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p palMateMapDo) Group(cols ...field.Expr) IPalMateMapDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p palMateMapDo) Having(conds ...gen.Condition) IPalMateMapDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p palMateMapDo) Limit(limit int) IPalMateMapDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p palMateMapDo) Offset(offset int) IPalMateMapDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p palMateMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPalMateMapDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p palMateMapDo) Unscoped() IPalMateMapDo {
	return p.withDO(p.DO.Unscoped())
}

func (p palMateMapDo) Create(values ...*model.PalMateMap) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p palMateMapDo) CreateInBatches(values []*model.PalMateMap, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p palMateMapDo) Save(values ...*model.PalMateMap) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p palMateMapDo) First() (*model.PalMateMap, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PalMateMap), nil
	}
}

func (p palMateMapDo) Take() (*model.PalMateMap, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PalMateMap), nil
	}
}

func (p palMateMapDo) Last() (*model.PalMateMap, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PalMateMap), nil
	}
}

func (p palMateMapDo) Find() ([]*model.PalMateMap, error) {
	result, err := p.DO.Find()
	return result.([]*model.PalMateMap), err
}

func (p palMateMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PalMateMap, err error) {
	buf := make([]*model.PalMateMap, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p palMateMapDo) FindInBatches(result *[]*model.PalMateMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p palMateMapDo) Attrs(attrs ...field.AssignExpr) IPalMateMapDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p palMateMapDo) Assign(attrs ...field.AssignExpr) IPalMateMapDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p palMateMapDo) Joins(fields ...field.RelationField) IPalMateMapDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p palMateMapDo) Preload(fields ...field.RelationField) IPalMateMapDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p palMateMapDo) FirstOrInit() (*model.PalMateMap, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PalMateMap), nil
	}
}

func (p palMateMapDo) FirstOrCreate() (*model.PalMateMap, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PalMateMap), nil
	}
}

func (p palMateMapDo) FindByPage(offset int, limit int) (result []*model.PalMateMap, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p palMateMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p palMateMapDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p palMateMapDo) Delete(models ...*model.PalMateMap) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *palMateMapDo) withDO(do gen.Dao) *palMateMapDo {
	p.DO = *do.(*gen.DO)
	return p
}
