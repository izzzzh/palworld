// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pal_mate.proto

package pal_mate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PalMateServer_ListPalMate_FullMethodName = "/pal_mate.PalMateServer/ListPalMate"
)

// PalMateServerClient is the client API for PalMateServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PalMateServerClient interface {
	ListPalMate(ctx context.Context, in *ListPalMateReq, opts ...grpc.CallOption) (*ListPalMateResp, error)
}

type palMateServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPalMateServerClient(cc grpc.ClientConnInterface) PalMateServerClient {
	return &palMateServerClient{cc}
}

func (c *palMateServerClient) ListPalMate(ctx context.Context, in *ListPalMateReq, opts ...grpc.CallOption) (*ListPalMateResp, error) {
	out := new(ListPalMateResp)
	err := c.cc.Invoke(ctx, PalMateServer_ListPalMate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PalMateServerServer is the server API for PalMateServer service.
// All implementations must embed UnimplementedPalMateServerServer
// for forward compatibility
type PalMateServerServer interface {
	ListPalMate(context.Context, *ListPalMateReq) (*ListPalMateResp, error)
	mustEmbedUnimplementedPalMateServerServer()
}

// UnimplementedPalMateServerServer must be embedded to have forward compatible implementations.
type UnimplementedPalMateServerServer struct {
}

func (UnimplementedPalMateServerServer) ListPalMate(context.Context, *ListPalMateReq) (*ListPalMateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPalMate not implemented")
}
func (UnimplementedPalMateServerServer) mustEmbedUnimplementedPalMateServerServer() {}

// UnsafePalMateServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PalMateServerServer will
// result in compilation errors.
type UnsafePalMateServerServer interface {
	mustEmbedUnimplementedPalMateServerServer()
}

func RegisterPalMateServerServer(s grpc.ServiceRegistrar, srv PalMateServerServer) {
	s.RegisterService(&PalMateServer_ServiceDesc, srv)
}

func _PalMateServer_ListPalMate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPalMateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalMateServerServer).ListPalMate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PalMateServer_ListPalMate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalMateServerServer).ListPalMate(ctx, req.(*ListPalMateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PalMateServer_ServiceDesc is the grpc.ServiceDesc for PalMateServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PalMateServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pal_mate.PalMateServer",
	HandlerType: (*PalMateServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPalMate",
			Handler:    _PalMateServer_ListPalMate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pal_mate.proto",
}
