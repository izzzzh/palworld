// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"palworld/rpc/goods/model"
)

func newGoods(db *gorm.DB, opts ...gen.DOOption) goods {
	_good := goods{}

	_good.goodDo.UseDB(db, opts...)
	_good.goodDo.UseModel(&model.Goods{})

	tableName := _good.goodDo.TableName()
	_good.ALL = field.NewAsterisk(tableName)
	_good.ID = field.NewInt64(tableName, "id")
	_good.Name = field.NewString(tableName, "name")
	_good.EnName = field.NewString(tableName, "en_name")
	_good.Description = field.NewString(tableName, "description")
	_good.Image = field.NewString(tableName, "image")
	_good.Materials = field.NewString(tableName, "materials")
	_good.Quality = field.NewInt32(tableName, "quality")
	_good.Workload = field.NewInt32(tableName, "workload")
	_good.Types = field.NewInt32(tableName, "types")

	_good.fillFieldMap()

	return _good
}

// good 物品
type goods struct {
	goodDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String // 名称
	EnName      field.String // 英文名称
	Description field.String // 描述
	Image       field.String // 图片
	Materials   field.String // 制造材料
	Quality     field.Int32  // 品质
	Workload    field.Int32  // 工作量
	Types       field.Int32  // 类型

	fieldMap map[string]field.Expr
}

func (g goods) Table(newTableName string) *goods {
	g.goodDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goods) As(alias string) *goods {
	g.goodDo.DO = *(g.goodDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goods) updateTableName(table string) *goods {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.EnName = field.NewString(table, "en_name")
	g.Description = field.NewString(table, "description")
	g.Image = field.NewString(table, "image")
	g.Materials = field.NewString(table, "materials")
	g.Quality = field.NewInt32(table, "quality")
	g.Workload = field.NewInt32(table, "workload")
	g.Types = field.NewInt32(table, "types")

	g.fillFieldMap()

	return g
}

func (g *goods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goods) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["en_name"] = g.EnName
	g.fieldMap["description"] = g.Description
	g.fieldMap["image"] = g.Image
	g.fieldMap["materials"] = g.Materials
	g.fieldMap["quality"] = g.Quality
	g.fieldMap["workload"] = g.Workload
	g.fieldMap["types"] = g.Types
}

func (g goods) clone(db *gorm.DB) goods {
	g.goodDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goods) replaceDB(db *gorm.DB) goods {
	g.goodDo.ReplaceDB(db)
	return g
}

type goodDo struct{ gen.DO }

type IGoodsDo interface {
	gen.SubQuery
	Debug() IGoodsDo
	WithContext(ctx context.Context) IGoodsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodsDo
	WriteDB() IGoodsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodsDo
	Not(conds ...gen.Condition) IGoodsDo
	Or(conds ...gen.Condition) IGoodsDo
	Select(conds ...field.Expr) IGoodsDo
	Where(conds ...gen.Condition) IGoodsDo
	Order(conds ...field.Expr) IGoodsDo
	Distinct(cols ...field.Expr) IGoodsDo
	Omit(cols ...field.Expr) IGoodsDo
	Join(table schema.Tabler, on ...field.Expr) IGoodsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodsDo
	Group(cols ...field.Expr) IGoodsDo
	Having(conds ...gen.Condition) IGoodsDo
	Limit(limit int) IGoodsDo
	Offset(offset int) IGoodsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsDo
	Unscoped() IGoodsDo
	Create(values ...*model.Goods) error
	CreateInBatches(values []*model.Goods, batchSize int) error
	Save(values ...*model.Goods) error
	First() (*model.Goods, error)
	Take() (*model.Goods, error)
	Last() (*model.Goods, error)
	Find() ([]*model.Goods, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Goods, err error)
	FindInBatches(result *[]*model.Goods, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Goods) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodsDo
	Assign(attrs ...field.AssignExpr) IGoodsDo
	Joins(fields ...field.RelationField) IGoodsDo
	Preload(fields ...field.RelationField) IGoodsDo
	FirstOrInit() (*model.Goods, error)
	FirstOrCreate() (*model.Goods, error)
	FindByPage(offset int, limit int) (result []*model.Goods, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodDo) Debug() IGoodsDo {
	return g.withDO(g.DO.Debug())
}

func (g goodDo) WithContext(ctx context.Context) IGoodsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodDo) ReadDB() IGoodsDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodDo) WriteDB() IGoodsDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodDo) Session(config *gorm.Session) IGoodsDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodDo) Clauses(conds ...clause.Expression) IGoodsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodDo) Returning(value interface{}, columns ...string) IGoodsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodDo) Not(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodDo) Or(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodDo) Select(conds ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodDo) Where(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodDo) Order(conds ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodDo) Distinct(cols ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodDo) Omit(cols ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodDo) Join(table schema.Tabler, on ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodDo) Group(cols ...field.Expr) IGoodsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodDo) Having(conds ...gen.Condition) IGoodsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodDo) Limit(limit int) IGoodsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodDo) Offset(offset int) IGoodsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodDo) Unscoped() IGoodsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodDo) Create(values ...*model.Goods) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodDo) CreateInBatches(values []*model.Goods, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodDo) Save(values ...*model.Goods) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodDo) First() (*model.Goods, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goods), nil
	}
}

func (g goodDo) Take() (*model.Goods, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goods), nil
	}
}

func (g goodDo) Last() (*model.Goods, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goods), nil
	}
}

func (g goodDo) Find() ([]*model.Goods, error) {
	result, err := g.DO.Find()
	return result.([]*model.Goods), err
}

func (g goodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Goods, err error) {
	buf := make([]*model.Goods, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodDo) FindInBatches(result *[]*model.Goods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodDo) Attrs(attrs ...field.AssignExpr) IGoodsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodDo) Assign(attrs ...field.AssignExpr) IGoodsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodDo) Joins(fields ...field.RelationField) IGoodsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodDo) Preload(fields ...field.RelationField) IGoodsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodDo) FirstOrInit() (*model.Goods, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goods), nil
	}
}

func (g goodDo) FirstOrCreate() (*model.Goods, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Goods), nil
	}
}

func (g goodDo) FindByPage(offset int, limit int) (result []*model.Goods, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodDo) Delete(models ...*model.Goods) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodDo) withDO(do gen.Dao) *goodDo {
	g.DO = *do.(*gen.DO)
	return g
}
