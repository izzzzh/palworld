// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"palworld/rpc/goods/model"
)

func newGoodsMaterial(db *gorm.DB, opts ...gen.DOOption) goodsMaterial {
	_goodsMaterial := goodsMaterial{}

	_goodsMaterial.goodsMaterialDo.UseDB(db, opts...)
	_goodsMaterial.goodsMaterialDo.UseModel(&model.GoodsMaterial{})

	tableName := _goodsMaterial.goodsMaterialDo.TableName()
	_goodsMaterial.ALL = field.NewAsterisk(tableName)
	_goodsMaterial.ID = field.NewInt64(tableName, "id")
	_goodsMaterial.GoodsID = field.NewInt64(tableName, "goods_id")
	_goodsMaterial.MaterialID = field.NewInt64(tableName, "material_id")
	_goodsMaterial.Cnt = field.NewInt32(tableName, "cnt")

	_goodsMaterial.fillFieldMap()

	return _goodsMaterial
}

// goodsMaterial 物品材料表
type goodsMaterial struct {
	goodsMaterialDo

	ALL        field.Asterisk
	ID         field.Int64
	GoodsID    field.Int64 // 物品ID
	MaterialID field.Int64 // 材料ID
	Cnt        field.Int32 // 数量

	fieldMap map[string]field.Expr
}

func (g goodsMaterial) Table(newTableName string) *goodsMaterial {
	g.goodsMaterialDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodsMaterial) As(alias string) *goodsMaterial {
	g.goodsMaterialDo.DO = *(g.goodsMaterialDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodsMaterial) updateTableName(table string) *goodsMaterial {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.GoodsID = field.NewInt64(table, "goods_id")
	g.MaterialID = field.NewInt64(table, "material_id")
	g.Cnt = field.NewInt32(table, "cnt")

	g.fillFieldMap()

	return g
}

func (g *goodsMaterial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodsMaterial) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["goods_id"] = g.GoodsID
	g.fieldMap["material_id"] = g.MaterialID
	g.fieldMap["cnt"] = g.Cnt
}

func (g goodsMaterial) clone(db *gorm.DB) goodsMaterial {
	g.goodsMaterialDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodsMaterial) replaceDB(db *gorm.DB) goodsMaterial {
	g.goodsMaterialDo.ReplaceDB(db)
	return g
}

type goodsMaterialDo struct{ gen.DO }

type IGoodsMaterialDo interface {
	gen.SubQuery
	Debug() IGoodsMaterialDo
	WithContext(ctx context.Context) IGoodsMaterialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodsMaterialDo
	WriteDB() IGoodsMaterialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodsMaterialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodsMaterialDo
	Not(conds ...gen.Condition) IGoodsMaterialDo
	Or(conds ...gen.Condition) IGoodsMaterialDo
	Select(conds ...field.Expr) IGoodsMaterialDo
	Where(conds ...gen.Condition) IGoodsMaterialDo
	Order(conds ...field.Expr) IGoodsMaterialDo
	Distinct(cols ...field.Expr) IGoodsMaterialDo
	Omit(cols ...field.Expr) IGoodsMaterialDo
	Join(table schema.Tabler, on ...field.Expr) IGoodsMaterialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsMaterialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodsMaterialDo
	Group(cols ...field.Expr) IGoodsMaterialDo
	Having(conds ...gen.Condition) IGoodsMaterialDo
	Limit(limit int) IGoodsMaterialDo
	Offset(offset int) IGoodsMaterialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsMaterialDo
	Unscoped() IGoodsMaterialDo
	Create(values ...*model.GoodsMaterial) error
	CreateInBatches(values []*model.GoodsMaterial, batchSize int) error
	Save(values ...*model.GoodsMaterial) error
	First() (*model.GoodsMaterial, error)
	Take() (*model.GoodsMaterial, error)
	Last() (*model.GoodsMaterial, error)
	Find() ([]*model.GoodsMaterial, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodsMaterial, err error)
	FindInBatches(result *[]*model.GoodsMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoodsMaterial) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodsMaterialDo
	Assign(attrs ...field.AssignExpr) IGoodsMaterialDo
	Joins(fields ...field.RelationField) IGoodsMaterialDo
	Preload(fields ...field.RelationField) IGoodsMaterialDo
	FirstOrInit() (*model.GoodsMaterial, error)
	FirstOrCreate() (*model.GoodsMaterial, error)
	FindByPage(offset int, limit int) (result []*model.GoodsMaterial, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodsMaterialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodsMaterialDo) Debug() IGoodsMaterialDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsMaterialDo) WithContext(ctx context.Context) IGoodsMaterialDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsMaterialDo) ReadDB() IGoodsMaterialDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodsMaterialDo) WriteDB() IGoodsMaterialDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodsMaterialDo) Session(config *gorm.Session) IGoodsMaterialDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodsMaterialDo) Clauses(conds ...clause.Expression) IGoodsMaterialDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsMaterialDo) Returning(value interface{}, columns ...string) IGoodsMaterialDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsMaterialDo) Not(conds ...gen.Condition) IGoodsMaterialDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsMaterialDo) Or(conds ...gen.Condition) IGoodsMaterialDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsMaterialDo) Select(conds ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsMaterialDo) Where(conds ...gen.Condition) IGoodsMaterialDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsMaterialDo) Order(conds ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsMaterialDo) Distinct(cols ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsMaterialDo) Omit(cols ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsMaterialDo) Join(table schema.Tabler, on ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsMaterialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsMaterialDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsMaterialDo) Group(cols ...field.Expr) IGoodsMaterialDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsMaterialDo) Having(conds ...gen.Condition) IGoodsMaterialDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsMaterialDo) Limit(limit int) IGoodsMaterialDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsMaterialDo) Offset(offset int) IGoodsMaterialDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsMaterialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsMaterialDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsMaterialDo) Unscoped() IGoodsMaterialDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsMaterialDo) Create(values ...*model.GoodsMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsMaterialDo) CreateInBatches(values []*model.GoodsMaterial, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsMaterialDo) Save(values ...*model.GoodsMaterial) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsMaterialDo) First() (*model.GoodsMaterial, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsMaterial), nil
	}
}

func (g goodsMaterialDo) Take() (*model.GoodsMaterial, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsMaterial), nil
	}
}

func (g goodsMaterialDo) Last() (*model.GoodsMaterial, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsMaterial), nil
	}
}

func (g goodsMaterialDo) Find() ([]*model.GoodsMaterial, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoodsMaterial), err
}

func (g goodsMaterialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodsMaterial, err error) {
	buf := make([]*model.GoodsMaterial, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsMaterialDo) FindInBatches(result *[]*model.GoodsMaterial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsMaterialDo) Attrs(attrs ...field.AssignExpr) IGoodsMaterialDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsMaterialDo) Assign(attrs ...field.AssignExpr) IGoodsMaterialDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsMaterialDo) Joins(fields ...field.RelationField) IGoodsMaterialDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsMaterialDo) Preload(fields ...field.RelationField) IGoodsMaterialDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsMaterialDo) FirstOrInit() (*model.GoodsMaterial, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsMaterial), nil
	}
}

func (g goodsMaterialDo) FirstOrCreate() (*model.GoodsMaterial, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsMaterial), nil
	}
}

func (g goodsMaterialDo) FindByPage(offset int, limit int) (result []*model.GoodsMaterial, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsMaterialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodsMaterialDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodsMaterialDo) Delete(models ...*model.GoodsMaterial) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodsMaterialDo) withDO(do gen.Dao) *goodsMaterialDo {
	g.DO = *do.(*gen.DO)
	return g
}
