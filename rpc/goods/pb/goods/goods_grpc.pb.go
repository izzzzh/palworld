// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoodsServer_ListGoods_FullMethodName = "/goods.GoodsServer/ListGoods"
)

// GoodsServerClient is the client API for GoodsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsServerClient interface {
	ListGoods(ctx context.Context, in *ListGoodsReq, opts ...grpc.CallOption) (*ListGoodsResp, error)
}

type goodsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsServerClient(cc grpc.ClientConnInterface) GoodsServerClient {
	return &goodsServerClient{cc}
}

func (c *goodsServerClient) ListGoods(ctx context.Context, in *ListGoodsReq, opts ...grpc.CallOption) (*ListGoodsResp, error) {
	out := new(ListGoodsResp)
	err := c.cc.Invoke(ctx, GoodsServer_ListGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServerServer is the server API for GoodsServer service.
// All implementations must embed UnimplementedGoodsServerServer
// for forward compatibility
type GoodsServerServer interface {
	ListGoods(context.Context, *ListGoodsReq) (*ListGoodsResp, error)
	mustEmbedUnimplementedGoodsServerServer()
}

// UnimplementedGoodsServerServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServerServer struct {
}

func (UnimplementedGoodsServerServer) ListGoods(context.Context, *ListGoodsReq) (*ListGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoods not implemented")
}
func (UnimplementedGoodsServerServer) mustEmbedUnimplementedGoodsServerServer() {}

// UnsafeGoodsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServerServer will
// result in compilation errors.
type UnsafeGoodsServerServer interface {
	mustEmbedUnimplementedGoodsServerServer()
}

func RegisterGoodsServerServer(s grpc.ServiceRegistrar, srv GoodsServerServer) {
	s.RegisterService(&GoodsServer_ServiceDesc, srv)
}

func _GoodsServer_ListGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).ListGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsServer_ListGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).ListGoods(ctx, req.(*ListGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsServer_ServiceDesc is the grpc.ServiceDesc for GoodsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.GoodsServer",
	HandlerType: (*GoodsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGoods",
			Handler:    _GoodsServer_ListGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
