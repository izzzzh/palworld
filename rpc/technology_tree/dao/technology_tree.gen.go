// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"palworld/rpc/technology_tree/model"
)

func newTechnologyTree(db *gorm.DB, opts ...gen.DOOption) technologyTree {
	_technologyTree := technologyTree{}

	_technologyTree.technologyTreeDo.UseDB(db, opts...)
	_technologyTree.technologyTreeDo.UseModel(&model.TechnologyTree{})

	tableName := _technologyTree.technologyTreeDo.TableName()
	_technologyTree.ALL = field.NewAsterisk(tableName)
	_technologyTree.ID = field.NewInt64(tableName, "id")
	_technologyTree.Name = field.NewString(tableName, "name")
	_technologyTree.Description = field.NewString(tableName, "description")
	_technologyTree.Cost = field.NewInt32(tableName, "cost")
	_technologyTree.Icon = field.NewString(tableName, "icon")
	_technologyTree.Ancient = field.NewBool(tableName, "ancient")
	_technologyTree.Level = field.NewInt32(tableName, "level")
	_technologyTree.CreatedAt = field.NewTime(tableName, "created_at")
	_technologyTree.UpdatedAt = field.NewTime(tableName, "updated_at")
	_technologyTree.DeletedAt = field.NewField(tableName, "deleted_at")

	_technologyTree.fillFieldMap()

	return _technologyTree
}

// technologyTree 科技树
type technologyTree struct {
	technologyTreeDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String // 名称
	Description field.String // 描述
	Cost        field.Int32  // 消耗
	Icon        field.String // 图标
	Ancient     field.Bool   // 是否古代科技
	Level       field.Int32  // 解锁等级
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t technologyTree) Table(newTableName string) *technologyTree {
	t.technologyTreeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t technologyTree) As(alias string) *technologyTree {
	t.technologyTreeDo.DO = *(t.technologyTreeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *technologyTree) updateTableName(table string) *technologyTree {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Description = field.NewString(table, "description")
	t.Cost = field.NewInt32(table, "cost")
	t.Icon = field.NewString(table, "icon")
	t.Ancient = field.NewBool(table, "ancient")
	t.Level = field.NewInt32(table, "level")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *technologyTree) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *technologyTree) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["description"] = t.Description
	t.fieldMap["cost"] = t.Cost
	t.fieldMap["icon"] = t.Icon
	t.fieldMap["ancient"] = t.Ancient
	t.fieldMap["level"] = t.Level
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t technologyTree) clone(db *gorm.DB) technologyTree {
	t.technologyTreeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t technologyTree) replaceDB(db *gorm.DB) technologyTree {
	t.technologyTreeDo.ReplaceDB(db)
	return t
}

type technologyTreeDo struct{ gen.DO }

type ITechnologyTreeDo interface {
	gen.SubQuery
	Debug() ITechnologyTreeDo
	WithContext(ctx context.Context) ITechnologyTreeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITechnologyTreeDo
	WriteDB() ITechnologyTreeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITechnologyTreeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITechnologyTreeDo
	Not(conds ...gen.Condition) ITechnologyTreeDo
	Or(conds ...gen.Condition) ITechnologyTreeDo
	Select(conds ...field.Expr) ITechnologyTreeDo
	Where(conds ...gen.Condition) ITechnologyTreeDo
	Order(conds ...field.Expr) ITechnologyTreeDo
	Distinct(cols ...field.Expr) ITechnologyTreeDo
	Omit(cols ...field.Expr) ITechnologyTreeDo
	Join(table schema.Tabler, on ...field.Expr) ITechnologyTreeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITechnologyTreeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITechnologyTreeDo
	Group(cols ...field.Expr) ITechnologyTreeDo
	Having(conds ...gen.Condition) ITechnologyTreeDo
	Limit(limit int) ITechnologyTreeDo
	Offset(offset int) ITechnologyTreeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITechnologyTreeDo
	Unscoped() ITechnologyTreeDo
	Create(values ...*model.TechnologyTree) error
	CreateInBatches(values []*model.TechnologyTree, batchSize int) error
	Save(values ...*model.TechnologyTree) error
	First() (*model.TechnologyTree, error)
	Take() (*model.TechnologyTree, error)
	Last() (*model.TechnologyTree, error)
	Find() ([]*model.TechnologyTree, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TechnologyTree, err error)
	FindInBatches(result *[]*model.TechnologyTree, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TechnologyTree) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITechnologyTreeDo
	Assign(attrs ...field.AssignExpr) ITechnologyTreeDo
	Joins(fields ...field.RelationField) ITechnologyTreeDo
	Preload(fields ...field.RelationField) ITechnologyTreeDo
	FirstOrInit() (*model.TechnologyTree, error)
	FirstOrCreate() (*model.TechnologyTree, error)
	FindByPage(offset int, limit int) (result []*model.TechnologyTree, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITechnologyTreeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t technologyTreeDo) Debug() ITechnologyTreeDo {
	return t.withDO(t.DO.Debug())
}

func (t technologyTreeDo) WithContext(ctx context.Context) ITechnologyTreeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t technologyTreeDo) ReadDB() ITechnologyTreeDo {
	return t.Clauses(dbresolver.Read)
}

func (t technologyTreeDo) WriteDB() ITechnologyTreeDo {
	return t.Clauses(dbresolver.Write)
}

func (t technologyTreeDo) Session(config *gorm.Session) ITechnologyTreeDo {
	return t.withDO(t.DO.Session(config))
}

func (t technologyTreeDo) Clauses(conds ...clause.Expression) ITechnologyTreeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t technologyTreeDo) Returning(value interface{}, columns ...string) ITechnologyTreeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t technologyTreeDo) Not(conds ...gen.Condition) ITechnologyTreeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t technologyTreeDo) Or(conds ...gen.Condition) ITechnologyTreeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t technologyTreeDo) Select(conds ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t technologyTreeDo) Where(conds ...gen.Condition) ITechnologyTreeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t technologyTreeDo) Order(conds ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t technologyTreeDo) Distinct(cols ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t technologyTreeDo) Omit(cols ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t technologyTreeDo) Join(table schema.Tabler, on ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t technologyTreeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t technologyTreeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t technologyTreeDo) Group(cols ...field.Expr) ITechnologyTreeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t technologyTreeDo) Having(conds ...gen.Condition) ITechnologyTreeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t technologyTreeDo) Limit(limit int) ITechnologyTreeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t technologyTreeDo) Offset(offset int) ITechnologyTreeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t technologyTreeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITechnologyTreeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t technologyTreeDo) Unscoped() ITechnologyTreeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t technologyTreeDo) Create(values ...*model.TechnologyTree) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t technologyTreeDo) CreateInBatches(values []*model.TechnologyTree, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t technologyTreeDo) Save(values ...*model.TechnologyTree) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t technologyTreeDo) First() (*model.TechnologyTree, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TechnologyTree), nil
	}
}

func (t technologyTreeDo) Take() (*model.TechnologyTree, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TechnologyTree), nil
	}
}

func (t technologyTreeDo) Last() (*model.TechnologyTree, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TechnologyTree), nil
	}
}

func (t technologyTreeDo) Find() ([]*model.TechnologyTree, error) {
	result, err := t.DO.Find()
	return result.([]*model.TechnologyTree), err
}

func (t technologyTreeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TechnologyTree, err error) {
	buf := make([]*model.TechnologyTree, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t technologyTreeDo) FindInBatches(result *[]*model.TechnologyTree, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t technologyTreeDo) Attrs(attrs ...field.AssignExpr) ITechnologyTreeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t technologyTreeDo) Assign(attrs ...field.AssignExpr) ITechnologyTreeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t technologyTreeDo) Joins(fields ...field.RelationField) ITechnologyTreeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t technologyTreeDo) Preload(fields ...field.RelationField) ITechnologyTreeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t technologyTreeDo) FirstOrInit() (*model.TechnologyTree, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TechnologyTree), nil
	}
}

func (t technologyTreeDo) FirstOrCreate() (*model.TechnologyTree, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TechnologyTree), nil
	}
}

func (t technologyTreeDo) FindByPage(offset int, limit int) (result []*model.TechnologyTree, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t technologyTreeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t technologyTreeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t technologyTreeDo) Delete(models ...*model.TechnologyTree) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *technologyTreeDo) withDO(do gen.Dao) *technologyTreeDo {
	t.DO = *do.(*gen.DO)
	return t
}
