// Code generated by goctl. DO NOT EDIT.
// Source: technology_tree.proto

package technologytreeserver

import (
	"context"

	"palworld/rpc/technology_tree/pb/technology_tree"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetTechnologyTreeReq  = technology_tree.GetTechnologyTreeReq
	GetTechnologyTreeResp = technology_tree.GetTechnologyTreeResp
	Technology            = technology_tree.Technology
	TechnologyTree        = technology_tree.TechnologyTree

	TechnologyTreeServer interface {
		GetTechnologyTree(ctx context.Context, in *GetTechnologyTreeReq, opts ...grpc.CallOption) (*GetTechnologyTreeResp, error)
	}

	defaultTechnologyTreeServer struct {
		cli zrpc.Client
	}
)

func NewTechnologyTreeServer(cli zrpc.Client) TechnologyTreeServer {
	return &defaultTechnologyTreeServer{
		cli: cli,
	}
}

func (m *defaultTechnologyTreeServer) GetTechnologyTree(ctx context.Context, in *GetTechnologyTreeReq, opts ...grpc.CallOption) (*GetTechnologyTreeResp, error) {
	client := technology_tree.NewTechnologyTreeServerClient(m.cli.Conn())
	return client.GetTechnologyTree(ctx, in, opts...)
}
