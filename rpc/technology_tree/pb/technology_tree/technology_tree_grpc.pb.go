// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: technology_tree.proto

package technology_tree

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TechnologyTreeServer_GetTechnologyTree_FullMethodName = "/technology_tree.TechnologyTreeServer/GetTechnologyTree"
)

// TechnologyTreeServerClient is the client API for TechnologyTreeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TechnologyTreeServerClient interface {
	GetTechnologyTree(ctx context.Context, in *GetTechnologyTreeReq, opts ...grpc.CallOption) (*GetTechnologyTreeResp, error)
}

type technologyTreeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTechnologyTreeServerClient(cc grpc.ClientConnInterface) TechnologyTreeServerClient {
	return &technologyTreeServerClient{cc}
}

func (c *technologyTreeServerClient) GetTechnologyTree(ctx context.Context, in *GetTechnologyTreeReq, opts ...grpc.CallOption) (*GetTechnologyTreeResp, error) {
	out := new(GetTechnologyTreeResp)
	err := c.cc.Invoke(ctx, TechnologyTreeServer_GetTechnologyTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TechnologyTreeServerServer is the server API for TechnologyTreeServer service.
// All implementations must embed UnimplementedTechnologyTreeServerServer
// for forward compatibility
type TechnologyTreeServerServer interface {
	GetTechnologyTree(context.Context, *GetTechnologyTreeReq) (*GetTechnologyTreeResp, error)
	mustEmbedUnimplementedTechnologyTreeServerServer()
}

// UnimplementedTechnologyTreeServerServer must be embedded to have forward compatible implementations.
type UnimplementedTechnologyTreeServerServer struct {
}

func (UnimplementedTechnologyTreeServerServer) GetTechnologyTree(context.Context, *GetTechnologyTreeReq) (*GetTechnologyTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTechnologyTree not implemented")
}
func (UnimplementedTechnologyTreeServerServer) mustEmbedUnimplementedTechnologyTreeServerServer() {}

// UnsafeTechnologyTreeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TechnologyTreeServerServer will
// result in compilation errors.
type UnsafeTechnologyTreeServerServer interface {
	mustEmbedUnimplementedTechnologyTreeServerServer()
}

func RegisterTechnologyTreeServerServer(s grpc.ServiceRegistrar, srv TechnologyTreeServerServer) {
	s.RegisterService(&TechnologyTreeServer_ServiceDesc, srv)
}

func _TechnologyTreeServer_GetTechnologyTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTechnologyTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnologyTreeServerServer).GetTechnologyTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechnologyTreeServer_GetTechnologyTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnologyTreeServerServer).GetTechnologyTree(ctx, req.(*GetTechnologyTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TechnologyTreeServer_ServiceDesc is the grpc.ServiceDesc for TechnologyTreeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TechnologyTreeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "technology_tree.TechnologyTreeServer",
	HandlerType: (*TechnologyTreeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTechnologyTree",
			Handler:    _TechnologyTreeServer_GetTechnologyTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "technology_tree.proto",
}
