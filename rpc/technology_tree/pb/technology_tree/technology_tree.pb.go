// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: technology_tree.proto

package technology_tree

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTechnologyTreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTechnologyTreeReq) Reset() {
	*x = GetTechnologyTreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechnologyTreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechnologyTreeReq) ProtoMessage() {}

func (x *GetTechnologyTreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechnologyTreeReq.ProtoReflect.Descriptor instead.
func (*GetTechnologyTreeReq) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{0}
}

type GetTechnologyTreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*TechnologyTree `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTechnologyTreeResp) Reset() {
	*x = GetTechnologyTreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechnologyTreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechnologyTreeResp) ProtoMessage() {}

func (x *GetTechnologyTreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechnologyTreeResp.ProtoReflect.Descriptor instead.
func (*GetTechnologyTreeResp) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{1}
}

func (x *GetTechnologyTreeResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTechnologyTreeResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTechnologyTreeResp) GetData() []*TechnologyTree {
	if x != nil {
		return x.Data
	}
	return nil
}

type TechnologyTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32         `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Data  []*Technology `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TechnologyTree) Reset() {
	*x = TechnologyTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechnologyTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnologyTree) ProtoMessage() {}

func (x *TechnologyTree) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnologyTree.ProtoReflect.Descriptor instead.
func (*TechnologyTree) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{2}
}

func (x *TechnologyTree) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TechnologyTree) GetData() []*Technology {
	if x != nil {
		return x.Data
	}
	return nil
}

type Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Count int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Material) Reset() {
	*x = Material{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{3}
}

func (x *Material) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Material) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Material) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Material) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Technology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Cost        int32       `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Ancient     bool        `protobuf:"varint,5,opt,name=ancient,proto3" json:"ancient,omitempty"`
	Icon        string      `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Level       int32       `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	Materials   []*Material `protobuf:"bytes,8,rep,name=materials,proto3" json:"materials,omitempty"`
}

func (x *Technology) Reset() {
	*x = Technology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Technology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Technology) ProtoMessage() {}

func (x *Technology) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Technology.ProtoReflect.Descriptor instead.
func (*Technology) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{4}
}

func (x *Technology) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Technology) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Technology) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Technology) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Technology) GetAncient() bool {
	if x != nil {
		return x.Ancient
	}
	return false
}

func (x *Technology) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Technology) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Technology) GetMaterials() []*Material {
	if x != nil {
		return x.Materials
	}
	return nil
}

type TechnologyMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TechnologyMaterial) Reset() {
	*x = TechnologyMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechnologyMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnologyMaterial) ProtoMessage() {}

func (x *TechnologyMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnologyMaterial.ProtoReflect.Descriptor instead.
func (*TechnologyMaterial) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{5}
}

func (x *TechnologyMaterial) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TechnologyMaterial) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AddTechnologyTreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       int32                 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Cost        int32                 `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Ancient     bool                  `protobuf:"varint,5,opt,name=ancient,proto3" json:"ancient,omitempty"`
	Icon        string                `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Materials   []*TechnologyMaterial `protobuf:"bytes,7,rep,name=materials,proto3" json:"materials,omitempty"`
}

func (x *AddTechnologyTreeReq) Reset() {
	*x = AddTechnologyTreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTechnologyTreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTechnologyTreeReq) ProtoMessage() {}

func (x *AddTechnologyTreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTechnologyTreeReq.ProtoReflect.Descriptor instead.
func (*AddTechnologyTreeReq) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{6}
}

func (x *AddTechnologyTreeReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AddTechnologyTreeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTechnologyTreeReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddTechnologyTreeReq) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *AddTechnologyTreeReq) GetAncient() bool {
	if x != nil {
		return x.Ancient
	}
	return false
}

func (x *AddTechnologyTreeReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddTechnologyTreeReq) GetMaterials() []*TechnologyMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

type AddTechnologyTreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddTechnologyTreeResp) Reset() {
	*x = AddTechnologyTreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTechnologyTreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTechnologyTreeResp) ProtoMessage() {}

func (x *AddTechnologyTreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTechnologyTreeResp.ProtoReflect.Descriptor instead.
func (*AddTechnologyTreeResp) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{7}
}

func (x *AddTechnologyTreeResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddTechnologyTreeResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateTechnologyTreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level       int32                 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Name        string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Cost        int32                 `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Ancient     bool                  `protobuf:"varint,6,opt,name=ancient,proto3" json:"ancient,omitempty"`
	Icon        string                `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	Materials   []*TechnologyMaterial `protobuf:"bytes,8,rep,name=materials,proto3" json:"materials,omitempty"`
}

func (x *UpdateTechnologyTreeReq) Reset() {
	*x = UpdateTechnologyTreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTechnologyTreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTechnologyTreeReq) ProtoMessage() {}

func (x *UpdateTechnologyTreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTechnologyTreeReq.ProtoReflect.Descriptor instead.
func (*UpdateTechnologyTreeReq) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTechnologyTreeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTechnologyTreeReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdateTechnologyTreeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTechnologyTreeReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTechnologyTreeReq) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *UpdateTechnologyTreeReq) GetAncient() bool {
	if x != nil {
		return x.Ancient
	}
	return false
}

func (x *UpdateTechnologyTreeReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateTechnologyTreeReq) GetMaterials() []*TechnologyMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

type UpdateTechnologyTreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateTechnologyTreeResp) Reset() {
	*x = UpdateTechnologyTreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTechnologyTreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTechnologyTreeResp) ProtoMessage() {}

func (x *UpdateTechnologyTreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTechnologyTreeResp.ProtoReflect.Descriptor instead.
func (*UpdateTechnologyTreeResp) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateTechnologyTreeResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateTechnologyTreeResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTechnologyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTechnologyReq) Reset() {
	*x = GetTechnologyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechnologyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechnologyReq) ProtoMessage() {}

func (x *GetTechnologyReq) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechnologyReq.ProtoReflect.Descriptor instead.
func (*GetTechnologyReq) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{10}
}

func (x *GetTechnologyReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTechnologyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Technology `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTechnologyResp) Reset() {
	*x = GetTechnologyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_tree_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechnologyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechnologyResp) ProtoMessage() {}

func (x *GetTechnologyResp) ProtoReflect() protoreflect.Message {
	mi := &file_technology_tree_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechnologyResp.ProtoReflect.Descriptor instead.
func (*GetTechnologyResp) Descriptor() ([]byte, []int) {
	return file_technology_tree_proto_rawDescGZIP(), []int{11}
}

func (x *GetTechnologyResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTechnologyResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTechnologyResp) GetData() *Technology {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_technology_tree_proto protoreflect.FileDescriptor

var file_technology_tree_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x0e,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6e, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x45, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0x48, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xa3, 0x03, 0x0a, 0x14, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x62, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x28, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_technology_tree_proto_rawDescOnce sync.Once
	file_technology_tree_proto_rawDescData = file_technology_tree_proto_rawDesc
)

func file_technology_tree_proto_rawDescGZIP() []byte {
	file_technology_tree_proto_rawDescOnce.Do(func() {
		file_technology_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_technology_tree_proto_rawDescData)
	})
	return file_technology_tree_proto_rawDescData
}

var file_technology_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_technology_tree_proto_goTypes = []interface{}{
	(*GetTechnologyTreeReq)(nil),     // 0: technology_tree.GetTechnologyTreeReq
	(*GetTechnologyTreeResp)(nil),    // 1: technology_tree.GetTechnologyTreeResp
	(*TechnologyTree)(nil),           // 2: technology_tree.TechnologyTree
	(*Material)(nil),                 // 3: technology_tree.Material
	(*Technology)(nil),               // 4: technology_tree.Technology
	(*TechnologyMaterial)(nil),       // 5: technology_tree.TechnologyMaterial
	(*AddTechnologyTreeReq)(nil),     // 6: technology_tree.AddTechnologyTreeReq
	(*AddTechnologyTreeResp)(nil),    // 7: technology_tree.AddTechnologyTreeResp
	(*UpdateTechnologyTreeReq)(nil),  // 8: technology_tree.UpdateTechnologyTreeReq
	(*UpdateTechnologyTreeResp)(nil), // 9: technology_tree.UpdateTechnologyTreeResp
	(*GetTechnologyReq)(nil),         // 10: technology_tree.GetTechnologyReq
	(*GetTechnologyResp)(nil),        // 11: technology_tree.GetTechnologyResp
}
var file_technology_tree_proto_depIdxs = []int32{
	2,  // 0: technology_tree.GetTechnologyTreeResp.data:type_name -> technology_tree.TechnologyTree
	4,  // 1: technology_tree.TechnologyTree.data:type_name -> technology_tree.Technology
	3,  // 2: technology_tree.Technology.materials:type_name -> technology_tree.Material
	5,  // 3: technology_tree.AddTechnologyTreeReq.materials:type_name -> technology_tree.TechnologyMaterial
	5,  // 4: technology_tree.UpdateTechnologyTreeReq.materials:type_name -> technology_tree.TechnologyMaterial
	4,  // 5: technology_tree.GetTechnologyResp.data:type_name -> technology_tree.Technology
	0,  // 6: technology_tree.TechnologyTreeServer.GetTechnologyTree:input_type -> technology_tree.GetTechnologyTreeReq
	6,  // 7: technology_tree.TechnologyTreeServer.AddTechnologyTree:input_type -> technology_tree.AddTechnologyTreeReq
	8,  // 8: technology_tree.TechnologyTreeServer.UpdateTechnologyTree:input_type -> technology_tree.UpdateTechnologyTreeReq
	10, // 9: technology_tree.TechnologyTreeServer.GetTechnology:input_type -> technology_tree.GetTechnologyReq
	1,  // 10: technology_tree.TechnologyTreeServer.GetTechnologyTree:output_type -> technology_tree.GetTechnologyTreeResp
	7,  // 11: technology_tree.TechnologyTreeServer.AddTechnologyTree:output_type -> technology_tree.AddTechnologyTreeResp
	9,  // 12: technology_tree.TechnologyTreeServer.UpdateTechnologyTree:output_type -> technology_tree.UpdateTechnologyTreeResp
	11, // 13: technology_tree.TechnologyTreeServer.GetTechnology:output_type -> technology_tree.GetTechnologyResp
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_technology_tree_proto_init() }
func file_technology_tree_proto_init() {
	if File_technology_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_technology_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechnologyTreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechnologyTreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechnologyTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Material); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Technology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechnologyMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTechnologyTreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTechnologyTreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTechnologyTreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTechnologyTreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechnologyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_tree_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechnologyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_technology_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_technology_tree_proto_goTypes,
		DependencyIndexes: file_technology_tree_proto_depIdxs,
		MessageInfos:      file_technology_tree_proto_msgTypes,
	}.Build()
	File_technology_tree_proto = out.File
	file_technology_tree_proto_rawDesc = nil
	file_technology_tree_proto_goTypes = nil
	file_technology_tree_proto_depIdxs = nil
}
