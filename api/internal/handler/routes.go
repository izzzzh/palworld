// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	comments "palworld/api/internal/handler/comments"
	container_services "palworld/api/internal/handler/container_services"
	goods "palworld/api/internal/handler/goods"
	pal "palworld/api/internal/handler/pal"
	pal_mate "palworld/api/internal/handler/pal_mate"
	skill "palworld/api/internal/handler/skill"
	technology_tree "palworld/api/internal/handler/technology_tree"
	user "palworld/api/internal/handler/user"
	"palworld/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/pal/:id",
				Handler: pal.GetPalHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/pal",
				Handler: pal.ListPalHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/pal",
				Handler: pal.CreatePalHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/pal/:id",
				Handler: pal.UpdatePalHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/pal/:id",
				Handler: pal.DeletePalHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/skill",
				Handler: skill.ListSkillHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/skill",
				Handler: skill.AddSkillHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/skill/:id",
				Handler: skill.DeleteSkillHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/skill/:id",
				Handler: skill.UpdateSkillHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/goods",
				Handler: goods.ListGoodsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/pal-mate",
				Handler: pal_mate.ListPalMateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/technology-tree",
				Handler: technology_tree.GetTechnologyTreeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/technology-tree",
				Handler: technology_tree.AddTechnologyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/technology-tree/:id",
				Handler: technology_tree.GetTechnologyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/containers",
				Handler: container_services.ListContainerHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/containers/logs",
				Handler: container_services.ContainerLogHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/captcha",
				Handler: user.GetCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/info/:id",
				Handler: user.GetUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user",
				Handler: user.GetUserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/user/:id",
				Handler: user.UpdateUserHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/user/:id",
				Handler: user.DeleteUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user",
				Handler: user.AddUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/comments",
				Handler: comments.ListCommentHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/comments",
				Handler: comments.AddCommentHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
